1. What happens when you initalize a respository? Why do you need to do it?
It seens that it just takes all the files in that folder and lets Git know that this is the place we are going to keep track of. We need to do it so Git understands what files we want to track.
2. How is the staging area different from the working directory and the respository? What value do you think it offers?
The staging area handles just the files getting ready to send to a commit. The working directory takes care of all the files involved in whatever you are working on. It makes it possible to seperate out just the files you want to send to a commit but keep track of all the files for that program.
3. How can you use the staging area to make sure you have one commit per logical change?
YOu can run git diff --staged to verify the differences between the current version and the one you are going to commit and see how many things have changed. 
4. What are some situations when branches would be helpful in keeping your history organized? how would branches help.
Using branches to seperate platforms like ios and Android, or release versions ie windows 7 to 10. It wouls make it possible to keep a project together but seperate and stop confusion. 
5. How do the diagrams help you visualize the branch structure?
It helps you see where each commit branches off and the parent for that branch.
6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
I could not get them to merge I dont think Git works well on a windows computer I've been having a ton of problems. :(  
7. What are the pros and cons of Gits automatic merging vs alwasy doing merges manually? The pros are that if it does work its a lot faster then merging the two files yourself. the cons are that it doesn't work well if the files are made on two differnt OS like mac and windows and it doesnt' work most of the time.
